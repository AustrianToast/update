#!/usr/bin/bash

source "$HOME"/.config/update.conf || exit 1
[[ ! -d $BACKUP_LOCATION ]] && mkdir --parents "$BACKUP_LOCATION"

VERSION="2.0.9"
IGREEN="\033[0;92m"     # Intense Green
IYELLOW="\033[0;93m"    # Intense Yellow
NO_COLOR="\033[0m"      # Text Reset
TMP="/tmp/update"
DATE="$(date +"%Y-%m-%dT%H:%M:%S%:z")"  # RFC 3339 date-time
FINAL_COMMAND=""

trap interrupt_function INT

interrupt_function() {
    echo "Interrupt has been detected"
    [[ -f /var/lib/pacman/db.lck ]] && sudo rm /var/lib/pacman/db.lck > /dev/null 2>&1
    rm --recursive "$TMP" > /dev/null 2>&1
    exit 1
}

help() {
   echo "Usage: update [OPTION]"
   echo
   echo "options:"
   echo "no flag        same as -p"
   echo "-f             updates using flatpak update only"
   echo "-p             updates using a pacman-wrapper only"
   echo "-a             updates using flatpak update and a pacman-wrapper"
   echo "-g             shutdowns the computer afterwards"
   echo "-r             reboots the computer afterwards"
   echo "--help         displays this message"
   echo "--preview      shows a preview of which pkg's can be updated"
   echo "--version      prints out the version number"
   echo "--backup       just does the before-backup without updating"
}

lock_pacman_db() {
    if [ -f /var/lib/pacman/db.lck ]; then
        echo -e "${IYELLOW}->${NO_COLOR} /var/lib/pacman/db.lck exists"
        echo -e "${IYELLOW}->${NO_COLOR} there might be another instance of pacman running. exiting..."
        exit 1
    fi
    sudo touch /var/lib/pacman/db.lck
}

delete_oldest_backup() {
    if [[ $(ls -Ub "$BACKUP_LOCATION" | grep -c $1) -ge $BACKUP_AMOUNT ]]; then
        OLDEST_FILE="$(ls -rt1 $BACKUP_LOCATION | grep $1 | head -1)"   # sorts by time (oldes first) and gets the first item
        rm "$BACKUP_LOCATION"/"$OLDEST_FILE"
    fi
}

before_backup() {
    lock_pacman_db
    delete_oldest_backup before-backup
    [[ -d $TMP ]] && rm -r "$TMP"
    mkdir --parents "$TMP"/before-backup_"$DATE" "$TMP"/after-backup_"$DATE"
    pacman -Q > "$TMP"/before-backup_"$DATE"/pacman-before.txt
    [[ -f /usr/bin/flatpak ]] && flatpak list --all --show-details > "$TMP"/before-backup_"$DATE"/flatpak-before.txt
    tar --create --xz --file "$TMP"/before-backup_"$DATE".tar.xz.new "$TMP"/before-backup_"$DATE" /var/lib/pacman/local > /dev/null 2>&1    # for some reason it needs the output suppresion
    sudo rm /var/lib/pacman/db.lck
    mv "$TMP"/before-backup_"$DATE".tar.xz.new "$BACKUP_LOCATION"
    mv "$BACKUP_LOCATION"/before-backup_"$DATE".tar.xz.new "$BACKUP_LOCATION"/before-backup_"$DATE".tar.xz
}

after_backup() {
    delete_oldest_backup after-backup
    tar --create --xz --file "$TMP"/after-backup_"$DATE".tar.xz.new "$TMP"/after-backup_"$DATE" > /dev/null 2>&1
    mv "$TMP"/after-backup_"$DATE".tar.xz.new "$BACKUP_LOCATION"
    mv "$BACKUP_LOCATION"/after-backup_"$DATE".tar.xz.new "$BACKUP_LOCATION"/after-backup_"$DATE".tar.xz
    rm --recursive "$TMP"
}

update_with_pacman_wrapper() {
    "$PACMAN_WRAPPER"
    pacman -Q > "$TMP"/after-backup_"$DATE"/pacman-after.txt
}

update_with_flatpak() {
	flatpak update --assumeyes
    flatpak list --all --show-details > "$TMP"/after-backup_"$DATE"/flatpak-after.txt
}

if [[ ${1:0:2} = -- ]]; then
    case "${1:2}" in
        help)
            help ;;
        preview)
            "$PACMAN_WRAPPER" -Sy
            "$PACMAN_WRAPPER" -Qu ;;
        version)
            echo "$VERSON" ;;
        backup)
            before_backup
            rm --recursive "$TMP" ;;
        ?)
            help; exit 1;;
    esac
    exit 0
fi

before_backup && echo -e "${IGREEN}pre-backup complete${NO_COLOR}"

[[ $1 ]] || update_with_pacman_wrapper
while getopts 'fpagr' OPTIONS; do
    case $OPTIONS in
        f)
            update_with_flatpak ;;
        p)
            update_with_pacman_wrapper ;;
        a)
            update_with_pacman_wrapper; update_with_flatpak ;;
        g)
            [[ $1 = -g ]] && update_with_pacman_wrapper
            FINAL_COMMAND="systemctl --check-inhibitors=yes poweroff" ;;
        r)
            [[ $1 = -r ]] && update_with_pacman_wrapper
            FINAL_COMMAND="systemctl --check-inhibitors=yes reboot" ;;
        ?)
            help; exit 1;;
    esac
done

after_backup && echo -e "${IGREEN}after-backup complete${NO_COLOR}"
$FINAL_COMMAND; exit 0
